package test;

import org.junit.Before;

import junit.framework.*;

import tp2.Triangle;

public class TypeTriangleTest {

	Triangle triangleTest;

	@Before
	public void init() {
		triangleTest = new Triangle();
	}

	//entrées valides
	@Test
	public void testTypeTriangleEquilateral() {
		int valeurAttendue = 3;
		int valeur = triangleTest.typeTriangle(12, 12, 12);
		assertEquals(valeurAttendue, valeur);
	}

	@Test
	//a==b != c
	public void testTypeTriangleIsocele() {
		int valeurAttendue = 2;
		int valeur = triangleTest.typeTriangle(12, 12, 14);
		Assert.assertTrue(valeur == valeurAttendue);
	}
	
	@Test
	//a==c != b
	public void testTypeTriangleIsocele2() {
		int valeurAttendue = 2;
		int valeur = triangleTest.typeTriangle(12, 14, 12);
		Assert.assertTrue(valeur == valeurAttendue);
	}

	@Test
	//b==c != a
	public void testTypeTriangleIsocele3() {
		int valeurAttendue = 2;
		int valeur = triangleTest.typeTriangle(14, 12, 12);
		Assert.assertTrue(valeur == valeurAttendue);
	}

	@Test
	public void testTypeTriangleScalene() {
		int valeurAttendue = 2;
		int valeur = triangleTest.typeTriangle(20, 17, 11);
		Assert.assertTrue(valeur == valeurAttendue);
	}
	
	//entrées invalides
	@Test
	public void testTriangleIncorrect() {
		int valeurAttendue = -1;
		int valeur = triangleTest.typeTriangle(15, 1, 1);
		Assert.assertTrue(valeur == valeurAttendue);
	}

	@Test
	public void testTriangleValeurNulle() {
		int valeurAttendue = -1;
		int valeur = triangleTest.typeTriangle(0, 0, 0);
		Assert.assertTrue(valeur == valeurAttendue);
	}

	@Test
	public void testTriangleValeurNegative() {
		int valeurAttendue = -1;
		int valeur = triangleTest.typeTriangle(-1, 0, 0);
		Assert.assertTrue(valeur == valeurAttendue);
	}

}
